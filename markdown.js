function Markdown (str = "") {
	let matches = [
		["(?<=^|\\n)#{1}\\s(.+?)(?:(\\s){([A-z0-9=\"-]+)})?(?=$|\\n)", "<h1$2$3>$1</h1>"],
		["(?<=^|\\n)#{2}\\s(.+?)(?:(\\s){([A-z0-9=\"-]+)})?(?=$|\\n)", "<h2$2$3>$1</h2>"],
		["(?<=^|\\n)#{3}\\s(.+?)(?:(\\s){([A-z0-9=\"-]+)})?(?=$|\\n)", "<h3$2$3>$1</h3>"],
		["(?<=^|\\n)#{4}\\s(.+?)(?:(\\s){([A-z0-9=\"-]+)})?(?=$|\\n)", "<h4$2$3>$1</h4>"],
		["(?<=^|\\n)#{5}\\s(.+?)(?:(\\s){([A-z0-9=\"-]+)})?(?=$|\\n)", "<h5$2$3>$1</h5>"],
		["(?<=^|\\n)#{6}\\s(.+?)(?:(\\s){([A-z0-9=\"-]+)})?(?=$|\\n)", "<h6$2$3>$1</h6>"],
		["\\*{2}(.+?)\\*{2}", "<b>$1</b>"],
		["_{2}(.+?)_{2}", "<u>$1</u>"],
		["(?:\\*){1}([^\\*]+?)(?:\\*){1}", "<i>$1</i>"],
		["(?:_){1}([^_]+?)(?:_){1}", "<i>$1</i>"],
		["~{2}(.+?)~{2}", "<strike>$1</strike>"],
		["!\\[([^]*?)\\]\\(([^)]*?)\\)(?:(\\s){([A-z0-9=\"-]+)})?", "<img alt=\"$1\" src=\"$2\"$3$4>"],
		["\\[([^]*?)\\]\\(([^)]*?)\\)(?:(\\s){([A-z0-9=\"-]+)})?", "<a href=\"$2\"$3$4>$1</a>"],
		["`{3}([a-z]+)\\n((?:.|\\n)*?)\\n`{3}", "<pre class=\"highlight language-$1\"><code>$2</code></pre>"],
		["(?:`){1}([^`]+?)(?:`){1}", "<code>$1</code>"],
		["\n\n", "</p><p>"]
	];
	this.toHTML = function () {
		for (let match of matches) {
			let r = new RegExp(match[0], "g"),
				t = match[1],
				j = str.match(r),
				i = t.match(/\$(\d+)/g);

			if (j !== null) for (let s of j) {
					let r = new RegExp(match[0], "g");
					let sM = r.exec(s);
					let tR = t;
					if (i !== null) for (let n of i) {
						let index = +n.substr(1);
						let sR = sM[index] === undefined ? "" : sM[index];
						tR = tR.replace(n, sR)
					}
					str = str.replace(s, tR);
				}

		}
		return `<p>${str}</p>`;
	}
}